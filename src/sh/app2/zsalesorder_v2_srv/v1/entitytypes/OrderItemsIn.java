package sh.app2.zsalesorder_v2_srv.v1.entitytypes;
/*

 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1

*/
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sap.gwpa.proxy.BaseEntityType;
import com.sap.gwpa.proxy.ODataQuery;
import com.sap.gwpa.proxy.TypeConverter;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataProperty;
import com.sap.mobile.lib.parser.IODataSchema;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.IParser;
import com.sap.mobile.lib.parser.ODataEntry;

/**
 * OrderItemsIn Entity Type 
 *
 * <br>key (ItmNumber)
 */
public class OrderItemsIn extends BaseEntityType 
{
	// OrderItemsIn properties
    private String Plant;
    private String Material;
    private String ItmNumber;

	// reference to the parser
	private IParser parser;
	// reference to the schema
	private IODataSchema schema;

	private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");


	private static Map<String, String> orderitemsinLabels;

	private static Map<String, String> orderitemsinTypes;	
	
	/**
	 * Constructor
	 * @param entry
	 * @throws MalformedURLException
	 */
	public OrderItemsIn(final IODataEntry entry, IParser parser, IODataSchema schema) throws MalformedURLException
	{
		super(entry);
		this.Plant =  TypeConverter.getAsString(entry.getPropertyValue("Plant"));
		this.Material =  TypeConverter.getAsString(entry.getPropertyValue("Material"));
		this.ItmNumber =  TypeConverter.getAsString(entry.getPropertyValue("ItmNumber"));
	    this.parser = parser;
        this.schema = schema;
 	}
	
	/**
	 * OrderItemsIn Constructor</br>
	 * Dummy values may apply
	 *
	 */
	public OrderItemsIn( String ItmNumber) 
	{
		super(new ODataEntry());
		
        this.setItmNumber(ItmNumber);
	}



	// OrderItemsIn properties getters and setters
		
	/**
	 * @return - String Plant
	 */
	public String getPlant()
	{
		return this.Plant;
	}
	
	/**
	 * @param Plant - Plant
	 */
	public void setPlant(String Plant)
	{
		this.Plant = Plant;
		
		getEntry().putPropertyValue("Plant", Plant);
	}
		
	/**
	 * @return - String Material
	 */
	public String getMaterial()
	{
		return this.Material;
	}
	
	/**
	 * @param Material - Material
	 */
	public void setMaterial(String Material)
	{
		this.Material = Material;
		
		getEntry().putPropertyValue("Material", Material);
	}
		
	/**
	 * @return - String Sales Document Item
	 */
	public String getItmNumber()
	{
		return this.ItmNumber;
	}
	
	/**
	 * @param ItmNumber - Sales Document Item
	 */
	public void setItmNumber(String ItmNumber)
	{
		this.ItmNumber = ItmNumber;
		
		getEntry().putPropertyValue("ItmNumber", ItmNumber);
	}
	
	/**
	 * @return - representation of the Entity Type object in OData4SAP format
	 */
	public String getStringPayload()  
	{
		String xml = null;
		
		xml = getEntry().toXMLString();
			
		return xml;
	}
	
	/**
	 * @return - self ODataQuery object
	 * @throws MalformedURLException 
	 */
	public ODataQuery getEntityQuery() throws MalformedURLException  
	{
		return new ODataQuery(getEntry().getSelfLink().getUrl());
	}
	
	/**
	 * @return - the date format.
	 */
	public DateFormat getDateFormat()
	{
		return this.dateFormat;
	}


	/**
    * Static method that loads all of the entity type property labels. 
    * This method is called when the service class is initialized.
    * @param service Service document object containing all of the entity type properties.
   	*/	
    public static void loadLabels(IODataServiceDocument service)
    {
    	List<IODataProperty> properties = getSchemaPropertiesFromCollection(service, "OrderItemsInSet" );
        
    	orderitemsinLabels = new HashMap<String, String>();
    	orderitemsinTypes = new HashMap<String, String>();
    	
    	if (properties != null)
    	{
	        for (IODataProperty property : properties) 
	        {
	        	orderitemsinLabels.put(property.getName(), property.getLabel());
	        	orderitemsinTypes.put(property.getName(), property.getType());
			}
    	}
    }
    
    
    /**
    * Static method that returns the type for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getTypeForProperty(String propertyName)
    {
        return getLabelFromDictionary(orderitemsinTypes, propertyName);
    }
    
    
    /**
    * Static method that returns the label for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getLabelForProperty(String propertyName)
    {
        return getLabelFromDictionary(orderitemsinLabels, propertyName);
    }
}