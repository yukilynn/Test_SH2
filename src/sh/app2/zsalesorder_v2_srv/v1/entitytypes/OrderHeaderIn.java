package sh.app2.zsalesorder_v2_srv.v1.entitytypes;
/*

 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1

*/
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.sap.gwpa.proxy.BaseEntityType;
import com.sap.gwpa.proxy.ODataQuery;
import com.sap.gwpa.proxy.TypeConverter;
import com.sap.mobile.lib.parser.IODataEntry;
import com.sap.mobile.lib.parser.IODataProperty;
import com.sap.mobile.lib.parser.IODataSchema;
import com.sap.mobile.lib.parser.IODataServiceDocument;
import com.sap.mobile.lib.parser.IParser;
import com.sap.mobile.lib.parser.ODataEntry;
import com.sap.mobile.lib.parser.ParserException;

/**
 * OrderHeaderIn Entity Type 
 *
 * <br>key (DocType)
 */
public class OrderHeaderIn extends BaseEntityType 
{
	// OrderHeaderIn properties
    private String Division;
    private String DocType;
    private String SalesOrg;
    private String DistrChan;

	// reference to the parser
	private IParser parser;
	// reference to the schema
	private IODataSchema schema;

	private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

	// OrderHeaderIn navigation properties
	private  List<OrderScheduleIn> header_schedule_nav = null;
	private  List<OrderItemsIn> header_item_nav = null;
	private  List<OrderPartners> header_partner_nav = null;

	private static Map<String, String> orderheaderinLabels;

	private static Map<String, String> orderheaderinTypes;	
	
	/**
	 * Constructor
	 * @param entry
	 * @throws MalformedURLException
	 */
	public OrderHeaderIn(final IODataEntry entry, IParser parser, IODataSchema schema) throws MalformedURLException
	{
		super(entry);
		this.Division =  TypeConverter.getAsString(entry.getPropertyValue("Division"));
		this.DocType =  TypeConverter.getAsString(entry.getPropertyValue("DocType"));
		this.SalesOrg =  TypeConverter.getAsString(entry.getPropertyValue("SalesOrg"));
		this.DistrChan =  TypeConverter.getAsString(entry.getPropertyValue("DistrChan"));
	    this.parser = parser;
        this.schema = schema;
 	}
	
	/**
	 * OrderHeaderIn Constructor</br>
	 * Dummy values may apply
	 *
	 */
	public OrderHeaderIn( String DocType) 
	{
		super(new ODataEntry());
		
        this.setDocType(DocType);
	}

	// OrderHeaderIn navigation properties

	/**
	 * Header_Schedule_Nav Query
	 * @return - ODataQuery
	 * @throws - MalformedURLException
	 */
	public ODataQuery Header_Schedule_NavQuery() throws MalformedURLException
	{
		String url = getEntry().getId() + "/" + "Header_Schedule_Nav";
		ODataQuery query = new ODataQuery(url);
		
		return query;
	}

	/**
	 * Get Header_Schedule_Nav  
	 * @return - List&ltOrderScheduleIn&gt
	 * @throws - IllegalArgumentException, ParserException, MalformedURLException
	 */
	public List<OrderScheduleIn> Header_Schedule_Nav(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		List<OrderScheduleIn> result = null;
			
		List<IODataEntry> parsedSDMODataEntries = getParsedSDMODataEntries(data, parser, schema, "OrderHeaderIn","Header_Schedule_Nav");	


		result = new LinkedList<OrderScheduleIn>(); 
	
		for (IODataEntry entry : parsedSDMODataEntries)
		{
			result.add(new OrderScheduleIn(entry, parser, schema));
		}
        return result;
	}

	/**
	 * Header_Item_Nav Query
	 * @return - ODataQuery
	 * @throws - MalformedURLException
	 */
	public ODataQuery Header_Item_NavQuery() throws MalformedURLException
	{
		String url = getEntry().getId() + "/" + "Header_Item_Nav";
		ODataQuery query = new ODataQuery(url);
		
		return query;
	}

	/**
	 * Get Header_Item_Nav  
	 * @return - List&ltOrderItemsIn&gt
	 * @throws - IllegalArgumentException, ParserException, MalformedURLException
	 */
	public List<OrderItemsIn> Header_Item_Nav(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		List<OrderItemsIn> result = null;
			
		List<IODataEntry> parsedSDMODataEntries = getParsedSDMODataEntries(data, parser, schema, "OrderHeaderIn","Header_Item_Nav");	


		result = new LinkedList<OrderItemsIn>(); 
	
		for (IODataEntry entry : parsedSDMODataEntries)
		{
			result.add(new OrderItemsIn(entry, parser, schema));
		}
        return result;
	}

	/**
	 * Header_Partner_Nav Query
	 * @return - ODataQuery
	 * @throws - MalformedURLException
	 */
	public ODataQuery Header_Partner_NavQuery() throws MalformedURLException
	{
		String url = getEntry().getId() + "/" + "Header_Partner_Nav";
		ODataQuery query = new ODataQuery(url);
		
		return query;
	}

	/**
	 * Get Header_Partner_Nav  
	 * @return - List&ltOrderPartners&gt
	 * @throws - IllegalArgumentException, ParserException, MalformedURLException
	 */
	public List<OrderPartners> Header_Partner_Nav(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		List<OrderPartners> result = null;
			
		List<IODataEntry> parsedSDMODataEntries = getParsedSDMODataEntries(data, parser, schema, "OrderHeaderIn","Header_Partner_Nav");	


		result = new LinkedList<OrderPartners>(); 
	
		for (IODataEntry entry : parsedSDMODataEntries)
		{
			result.add(new OrderPartners(entry, parser, schema));
		}
        return result;
	}


	/**
	 * Header_Schedule_Nav Load method
	 *
	 * loads the navigation property entries into the entityType
	 * @throws ParserException 
	 * @throws IllegalArgumentException
	 * @throws MalformedURLException
	 *
	 */
	public void loadHeader_Schedule_Nav(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		List<OrderScheduleIn> semanticData = Header_Schedule_Nav(data);
		setHeader_Schedule_Nav(semanticData);
	}

	/**
	 * Header_Item_Nav Load method
	 *
	 * loads the navigation property entries into the entityType
	 * @throws ParserException 
	 * @throws IllegalArgumentException
	 * @throws MalformedURLException
	 *
	 */
	public void loadHeader_Item_Nav(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		List<OrderItemsIn> semanticData = Header_Item_Nav(data);
		setHeader_Item_Nav(semanticData);
	}

	/**
	 * Header_Partner_Nav Load method
	 *
	 * loads the navigation property entries into the entityType
	 * @throws ParserException 
	 * @throws IllegalArgumentException
	 * @throws MalformedURLException
	 *
	 */
	public void loadHeader_Partner_Nav(String data) throws IllegalArgumentException, ParserException, MalformedURLException
	{
		List<OrderPartners> semanticData = Header_Partner_Nav(data);
		setHeader_Partner_Nav(semanticData);
	}

	// OrderHeaderIn properties getters and setters
		
	/**
	 * @return - String Division
	 */
	public String getDivision()
	{
		return this.Division;
	}
	
	/**
	 * @param Division - Division
	 */
	public void setDivision(String Division)
	{
		this.Division = Division;
		
		getEntry().putPropertyValue("Division", Division);
	}
		
	/**
	 * @return - String Sales Document Type
	 */
	public String getDocType()
	{
		return this.DocType;
	}
	
	/**
	 * @param DocType - Sales Document Type
	 */
	public void setDocType(String DocType)
	{
		this.DocType = DocType;
		
		getEntry().putPropertyValue("DocType", DocType);
	}
		
	/**
	 * @return - String Sales Organization
	 */
	public String getSalesOrg()
	{
		return this.SalesOrg;
	}
	
	/**
	 * @param SalesOrg - Sales Organization
	 */
	public void setSalesOrg(String SalesOrg)
	{
		this.SalesOrg = SalesOrg;
		
		getEntry().putPropertyValue("SalesOrg", SalesOrg);
	}
		
	/**
	 * @return - String Distribution Channel
	 */
	public String getDistrChan()
	{
		return this.DistrChan;
	}
	
	/**
	 * @param DistrChan - Distribution Channel
	 */
	public void setDistrChan(String DistrChan)
	{
		this.DistrChan = DistrChan;
		
		getEntry().putPropertyValue("DistrChan", DistrChan);
	}
	
	/**
	 * @return - representation of the Entity Type object in OData4SAP format
	 */
	public String getStringPayload()  
	{
		String xml = null;
		
		xml = getEntry().toXMLString();
			
		return xml;
	}
	
	/**
	 * @return - self ODataQuery object
	 * @throws MalformedURLException 
	 */
	public ODataQuery getEntityQuery() throws MalformedURLException  
	{
		return new ODataQuery(getEntry().getSelfLink().getUrl());
	}
	
	/**
	 * @return - the date format.
	 */
	public DateFormat getDateFormat()
	{
		return this.dateFormat;
	}

	// OrderHeaderIn navigation properties setters and getters
	
	/**
	 * Returns navigation property
	 * Returns null if was not expanded
	 * @throws MalformedURLException
	 */
	public List<OrderScheduleIn> getHeader_Schedule_Nav() throws MalformedURLException
	{
		if (null == header_schedule_nav)
		{
			//load InlineEntries for Header_Schedule_Nav
			List<IODataEntry> inlineEntries  = getInlineEntries(getEntry(),"Header_Schedule_Nav");

			if (null != inlineEntries) 
			{
				header_schedule_nav = new LinkedList<OrderScheduleIn>();
				for (IODataEntry isdmoDataEntry : inlineEntries) 
				{
					header_schedule_nav.add(new OrderScheduleIn(isdmoDataEntry, parser, schema));
				}
			}
		}
		return header_schedule_nav;
	}

	/**
	 * Sets navigation property
	 * @param header_schedule_nav - the navigation property to set.
	 */
	public void setHeader_Schedule_Nav(List<OrderScheduleIn> header_schedule_nav) 
	{
		this.header_schedule_nav = header_schedule_nav;
	}
	
	/**
	 * Returns navigation property
	 * Returns null if was not expanded
	 * @throws MalformedURLException
	 */
	public List<OrderItemsIn> getHeader_Item_Nav() throws MalformedURLException
	{
		if (null == header_item_nav)
		{
			//load InlineEntries for Header_Item_Nav
			List<IODataEntry> inlineEntries  = getInlineEntries(getEntry(),"Header_Item_Nav");

			if (null != inlineEntries) 
			{
				header_item_nav = new LinkedList<OrderItemsIn>();
				for (IODataEntry isdmoDataEntry : inlineEntries) 
				{
					header_item_nav.add(new OrderItemsIn(isdmoDataEntry, parser, schema));
				}
			}
		}
		return header_item_nav;
	}

	/**
	 * Sets navigation property
	 * @param header_item_nav - the navigation property to set.
	 */
	public void setHeader_Item_Nav(List<OrderItemsIn> header_item_nav) 
	{
		this.header_item_nav = header_item_nav;
	}
	
	/**
	 * Returns navigation property
	 * Returns null if was not expanded
	 * @throws MalformedURLException
	 */
	public List<OrderPartners> getHeader_Partner_Nav() throws MalformedURLException
	{
		if (null == header_partner_nav)
		{
			//load InlineEntries for Header_Partner_Nav
			List<IODataEntry> inlineEntries  = getInlineEntries(getEntry(),"Header_Partner_Nav");

			if (null != inlineEntries) 
			{
				header_partner_nav = new LinkedList<OrderPartners>();
				for (IODataEntry isdmoDataEntry : inlineEntries) 
				{
					header_partner_nav.add(new OrderPartners(isdmoDataEntry, parser, schema));
				}
			}
		}
		return header_partner_nav;
	}

	/**
	 * Sets navigation property
	 * @param header_partner_nav - the navigation property to set.
	 */
	public void setHeader_Partner_Nav(List<OrderPartners> header_partner_nav) 
	{
		this.header_partner_nav = header_partner_nav;
	}
	

	/**
    * Static method that loads all of the entity type property labels. 
    * This method is called when the service class is initialized.
    * @param service Service document object containing all of the entity type properties.
   	*/	
    public static void loadLabels(IODataServiceDocument service)
    {
    	List<IODataProperty> properties = getSchemaPropertiesFromCollection(service, "OrderHeaderInSet" );
        
    	orderheaderinLabels = new HashMap<String, String>();
    	orderheaderinTypes = new HashMap<String, String>();
    	
    	if (properties != null)
    	{
	        for (IODataProperty property : properties) 
	        {
	        	orderheaderinLabels.put(property.getName(), property.getLabel());
	        	orderheaderinTypes.put(property.getName(), property.getType());
			}
    	}
    }
    
    
    /**
    * Static method that returns the type for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getTypeForProperty(String propertyName)
    {
        return getLabelFromDictionary(orderheaderinTypes, propertyName);
    }
    
    
    /**
    * Static method that returns the label for a given property name.
    * @param propertyName Property name.
    * @return Property label.
   	*/
    public static String getLabelForProperty(String propertyName)
    {
        return getLabelFromDictionary(orderheaderinLabels, propertyName);
    }
}